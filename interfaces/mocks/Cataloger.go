// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	interfaces "gitlab.com/rbell/gospecexpress/interfaces"
)

// Cataloger is an autogenerated mock type for the Cataloger type
type Cataloger struct {
	mock.Mock
}

// MessageStore provides a mock function with given fields:
func (_m *Cataloger) MessageStore() interfaces.MessageStorer {
	ret := _m.Called()

	var r0 interfaces.MessageStorer
	if rf, ok := ret.Get(0).(func() interfaces.MessageStorer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.MessageStorer)
		}
	}

	return r0
}

// Register provides a mock function with given fields: s
func (_m *Cataloger) Register(s interfaces.SpecificationValidator) {
	_m.Called(s)
}

// Validate provides a mock function with given fields: something
func (_m *Cataloger) Validate(something interface{}) error {
	ret := _m.Called(something)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(something)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateWithContext provides a mock function with given fields: something, contextData
func (_m *Cataloger) ValidateWithContext(something interface{}, contextData map[string]interface{}) error {
	ret := _m.Called(something, contextData)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, map[string]interface{}) error); ok {
		r0 = rf(something, contextData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
