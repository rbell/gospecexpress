// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	interfaces "github.com/rbell/gospecexpress/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// QualifierBuilder is an autogenerated mock type for the QualifierBuilder type
type QualifierBuilder struct {
	mock.Mock
}

// Custom provides a mock function with given fields: exp
func (_m *QualifierBuilder) Custom(exp interfaces.ValidationExpression) interfaces.QualifierBuilder {
	ret := _m.Called(exp)

	var r0 interfaces.QualifierBuilder
	if rf, ok := ret.Get(0).(func(interfaces.ValidationExpression) interfaces.QualifierBuilder); ok {
		r0 = rf(exp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.QualifierBuilder)
		}
	}

	return r0
}

// Optional provides a mock function with given fields: fieldName
func (_m *QualifierBuilder) Optional(fieldName string) interfaces.ValidatorBuilder {
	ret := _m.Called(fieldName)

	var r0 interfaces.ValidatorBuilder
	if rf, ok := ret.Get(0).(func(string) interfaces.ValidatorBuilder); ok {
		r0 = rf(fieldName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.ValidatorBuilder)
		}
	}

	return r0
}

// Required provides a mock function with given fields: fieldName, options
func (_m *QualifierBuilder) Required(fieldName string, options ...interfaces.ValidatorOption) interfaces.ValidatorBuilder {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, fieldName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 interfaces.ValidatorBuilder
	if rf, ok := ret.Get(0).(func(string, ...interfaces.ValidatorOption) interfaces.ValidatorBuilder); ok {
		r0 = rf(fieldName, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.ValidatorBuilder)
		}
	}

	return r0
}
