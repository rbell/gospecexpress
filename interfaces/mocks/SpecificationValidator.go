// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	interfaces "github.com/rbell/gospecexpress/interfaces"
	mock "github.com/stretchr/testify/mock"

	reflect "reflect"
)

// SpecificationValidator is an autogenerated mock type for the SpecificationValidator type
type SpecificationValidator struct {
	mock.Mock
}

// ForType provides a mock function with given fields: forType
func (_m *SpecificationValidator) ForType(forType interface{}) interfaces.QualifierBuilder {
	ret := _m.Called(forType)

	var r0 interfaces.QualifierBuilder
	if rf, ok := ret.Get(0).(func(interface{}) interfaces.QualifierBuilder); ok {
		r0 = rf(forType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.QualifierBuilder)
		}
	}

	return r0
}

// GetForType provides a mock function with given fields:
func (_m *SpecificationValidator) GetForType() reflect.Type {
	ret := _m.Called()

	var r0 reflect.Type
	if rf, ok := ret.Get(0).(func() reflect.Type); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(reflect.Type)
		}
	}

	return r0
}

// GetScope provides a mock function with given fields:
func (_m *SpecificationValidator) GetScope() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Validate provides a mock function with given fields: subject, contextData
func (_m *SpecificationValidator) Validate(subject interface{}, contextData map[string]interface{}) error {
	ret := _m.Called(subject, contextData)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, map[string]interface{}) error); ok {
		r0 = rf(subject, contextData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
